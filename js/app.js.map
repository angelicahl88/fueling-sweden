{"version":3,"sources":["bundle.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar introQuiz = document.getElementById('introQuiz'),\n    homeTitle = document.getElementById('homeTitle'),\n    question = document.getElementById('question'),\n    skip = document.getElementsByClassName('skip'),\n    mapView = document.getElementById('mapView'),\n    currentQuestionIndex = 0,\n    infoBtn = document.getElementById('info'),\n    infoTooltip = document.getElementById('infoTooltip');\n\n\n\n//Quiz questions\nvar questions = [\n    {\n        question: 'How many passenger cars were registered in Sweden at the end of 2015?',\n        answer1: '2.7 million',\n        answer2: '4.7 million',\n        answer3: '6.7 million',\n        correctAnswer: 1\n    },\n    {\n        question: 'Of these cars, which is the most common type of fuel used in Sweden?',\n        answer1: 'Petrol',\n        answer2: 'Electric Hybrid',\n        answer3: 'Diesel',\n        correctAnswer: 0\n    },\n    {\n        question: 'What percentage of all passenger cars in Sweden run solely on electricity?',\n        answer1: '0,1%',\n        answer2: '7,2%',\n        answer3: '11,3%',\n        correctAnswer: 0\n    }\n];\n\n//Run introContent through quiz.\nsetTimeout(function() {\n    nextView(homeTitle, question);\n    generateQuiz(currentQuestionIndex);\n}, 2000);\n\n//Change to next view\nfunction nextView(oldViewId, newViewId) {\n    //Run introMapView if newViewId == mapView else show next question\n    if (newViewId == mapView) {\n        introQuiz.classList.remove('active');\n        mapView.classList.add('active');\n    } else {\n        oldViewId.classList.remove('active');\n        newViewId.classList.add('active');\n    }\n}\n\n\nfunction showAnswer(boolean, questionIndex, userAnswerIndex, correctAnswerIndex) {\n    var arr = [0,1,2];\n    var correct = document.getElementById('aIndex' + correctAnswerIndex);\n\n    if (boolean) {\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === correctAnswerIndex) {\n                correct.classList.add('correct');\n            } else {\n                document.getElementById('aIndex' + arr[i]).classList.add('notGuessed');\n            }\n        }\n    } else {\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === correctAnswerIndex) {\n                correct.classList.add('correct');\n            } else if (arr[i] === userAnswerIndex) {\n                document.getElementById('aIndex' + arr[i]).classList.add('incorrect');\n            } else {\n                document.getElementById('aIndex' + arr[i]).classList.add('notGuessed');\n            }\n        }\n    }\n\n    //Finish quiz after the last question\n    setTimeout(function() {\n        if (questionIndex < questions.length - 1) {\n            currentQuestionIndex += 1;\n            generateQuiz(currentQuestionIndex);\n        } else {\n            nextView(question, mapView);\n        }\n    }, 1500);\n}\n\n\nfunction checkAnswer(answerIndex, questionIndex) {\n    return function() {\n        var userAnswer = answerIndex,\n            correctAnswer = questions[questionIndex].correctAnswer;\n\n        if (userAnswer === correctAnswer) {\n            showAnswer(true, questionIndex, answerIndex, correctAnswer);\n        } else {\n            showAnswer(false, questionIndex, answerIndex, correctAnswer);\n        }\n    };\n}\n\n//Generate/Switch to next question\nfunction generateQuiz(questionIndex) {\n\n    var quizBody =  '<h3 class=\"italic\">';\n        quizBody += questions[questionIndex].question + '</h3>';\n        quizBody += '<h2 class=\"answer\" id=\"aIndex0\">';\n        quizBody += questions[questionIndex].answer1 + '</h2>';\n        quizBody += '<h2 class=\"answer\" id=\"aIndex1\">';\n        quizBody += questions[questionIndex].answer2 + '</h2>';\n        quizBody += '<h2 class=\"answer\" id=\"aIndex2\">';\n        quizBody += questions[questionIndex].answer3 + '</h2>';\n        quizBody += '<h4 class=\"skip upper\"> skip</h4>';\n\n    question.innerHTML = quizBody;\n\n    //Show correct answer when user clicks an answer\n    var answer = document.getElementsByClassName('answer');\n    var skip = document.getElementsByClassName('skip');\n    for (var i = 0; i < answer.length; i++) {\n        answer[i].addEventListener('click', checkAnswer(i, questionIndex));\n    }\n    //Skip to map if user clicks skip\n    skip[0].addEventListener('click', function() {\n        nextView(question, mapView)\n    });\n\n}\n\n//Run mapView\n//Show infoTooltip when user clicks #info\ninfoBtn.addEventListener('click', function() {\n   if(infoTooltip.classList.length === 0) {\n       infoTooltip.classList.add('active');\n       infoBtn.innerHTML = 'close';\n   } else {\n       infoTooltip.classList.remove('active');\n       infoBtn.innerHTML = 'info';\n   }\n});\n\n//Close introMapView, generate min max from data, compute legend, and render map when user clicks goToMap\ndocument.getElementById('goToMap').addEventListener('click', function() {\n    document.getElementById('mapIntroView').classList.remove('active');\n    generateMinMax('PETROL');\n    renderMap();\n});\n\n\n//DATA PROCESSING\nvar maxValue,\n    minValue,\n    currentLayer,\n    legend = document.getElementById('legend'),\n    activeFuel = document.getElementById('activeFuel'),\n    fuelTypeChange = document.getElementById('fuelTypeChange'),\n    fuelType = document.getElementsByClassName('fuelType');\n\nfunction formatPercent(value) {\n  var percentValue = value.toFixed(1) + '%';\n  return percentValue.toString();\n}\n\n//Generate min and max of data layer\nfunction generateMinMax(dataLayer) {\n    if (dataLayer == 'ELECTRIC HYBRID') {\n      currentLayer = 'ELECTRICHYBRID';\n      dataLayer = 'ELECTRICHYBRID';\n    } else if (dataLayer == 'CHARGING HYBRID') {\n      currentLayer = 'CHARGINGHYBRID';\n      dataLayer = 'CHARGINGHYBRID';\n    } else {\n      currentLayer = dataLayer;\n    }\n    var dataArr = [];\n    for (var i = 0; i < fuelData.features.length; i++) {\n        var layerData = fuelData.features[i].properties[dataLayer];\n        dataArr.push(layerData);\n    }\n    maxValue = Math.max.apply(Math, dataArr);\n    minValue = Math.min.apply(Math, dataArr);\n}\n\nfunction updateLegend() {\n  document.getElementById('minValue').innerText = formatPercent(minValue);\n  document.getElementById('maxValue').innerText = formatPercent(maxValue);\n}\n\nfunction updateActiveFuel(newFuelType) {\n  activeFuel.innerText = newFuelType;\n}\n\nfunction getLegendPosition(value) {\n  var onePercentValue = 100 / (maxValue - minValue);\n  return Math.round((value - minValue) * onePercentValue);\n}\n\nfunction changeFuelType() {\n  if (fuelTypeChange.classList.length === 0) {\n    fuelTypeChange.classList.add('active');\n\n    //bind event handler to fuelType options\n    for (var i = 0; i < fuelType.length; i++) {\n      fuelType[i].addEventListener('click', function() {\n        updateActiveFuel(this.innerText);\n        generateMinMax(this.innerText);\n        updateLegend();\n        renderMap();\n        fuelTypeChange.classList.remove('active');\n        activeFuel.addEventListener('click', changeFuelType);\n      });\n    }\n\n  } else {\n    fuelTypeChange.classList.remove('active');\n  }\n}\n\n\n//Initiate and load tilelayer from Mapbox\nmapboxgl.accessToken = 'pk.eyJ1IjoiYW5nZWxpY2E4OCIsImEiOiJjaXJubWhrYjAwMDZjaGpuaDZ0aGE3cXZzIn0.aJ2_IfAe1yKkWByfiYyfog';\n\nvar map = new mapboxgl.Map({\n    container: 'map',\n    style: 'mapbox://styles/mapbox/dark-v9',\n    center: [14.993038200627012, 54.775893640702776],\n    zoom: 2.68,\n    minZoom: 2.68,\n    maxZoom: 6.36,\n    attributionControl: {\n      position: 'top-left'\n    }\n});\n\nvar bounds = [\n    [25.517317537856513, 69.3193677302958],\n    [7.15691005067589, 51.36162679619255]\n];\n\n//When map is fully loaded, load Data and render on map\nmap.on('load', function() {\n    map.addSource('fuelData', {\n        type: 'geojson',\n        data: fuelData\n    });\n\n    map.addSource('fuelHoverData', {\n      type: 'geojson',\n      data: {\n        'type': 'FeatureCollection',\n        'features': []\n      }\n    });\n});\n\nfunction renderMap() {\n    map.fitBounds(bounds);\n    map.addLayer({\n        'id': 'fuelMap',\n        'type': 'fill',\n        'layout': {},\n        'source': 'fuelData',\n        'paint': {\n            'fill-color': {\n                property: currentLayer,\n                stops: [\n                    [ minValue, '#FFF'],\n                    [ maxValue, '#F99F00']\n                ]\n            }\n        }\n    });\n\n    map.addLayer({\n        'id': 'fuelMapHover',\n        'type': 'line',\n        'layout': {},\n        'source': 'fuelHoverData',\n        'paint': {\n            'line-color': '#1D918E',\n            'line-width': 2\n        }\n    });\n\n  } // end renderMap\n\n\n  function countyHover() {\n    var hoverValue = document.getElementById('hoverValue');\n\n    map.on('mousemove', function(e) {\n      var features = map.queryRenderedFeatures(e.point, { layers: ['fuelMap']} );\n      map.getCanvas().style.cursor = (features.length) ? 'pointer' : '';\n\n      if (features.length) {\n        var legendPostion = getLegendPosition(features[0].properties[currentLayer]);\n        var newCss = 'bottom:' + legendPostion + '%';\n        hoverValue.style.cssText = newCss;\n\n        hoverValue.innerHTML = '<h5 class=\"hoverName\">' + features[0].properties.KOMMUN + '</h5>';\n        hoverValue.innerHTML += '<h5 class=\"hoverPercent\">' + formatPercent(features[0].properties[currentLayer]) + '</h5>';\n        hoverValue.classList.add('active');\n\n        map.getSource('fuelHoverData').setData({type: 'FeatureCollection', features: [features[0]]});\n\n      } else {\n        hoverValue.classList.remove('active');\n        map.getSource('fuelHoverData').setData({type: 'FeatureCollection', features: []});\n      }\n    }); //end mousemove event\n  }\n\n  //Display county fueltype percent if window width is greater than 600px\n  if (window.innerWidth > 600) {\n    countyHover();\n  }\n\n  //Bind event listenter to activeFuel\n  activeFuel.addEventListener('click', changeFuelType);\n\n\n  //////  WINDOW RESIZE //////\n  window.addEventListener('resize', function() {\n    map.fitBounds(bounds);\n  });\n\n},{}]},{},[1]);\n"],"sourceRoot":"/source/"}